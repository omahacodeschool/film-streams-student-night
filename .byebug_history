exit
student.errors.any?
student.errors.messages
student.valid?
student.errors.messages
student
student.email = "moo@moo.moo"
student.errors.messages
student.errors.any?
student.errors
student
Student.new
"blank" + rand(9999).to_s + "@invalid.com"
student.name.gsub(/\s+/, "") + rand(9999).to_s
student.name.gsub(/\s+/, "") + rand(9999)
student.name.gsub(/\s+/, "") + rand(9999(
rand(3000)
rand(10)
Rand(1)
Math.Rand(1)
Math.Rand
student.name.gsub(/\s+/, "") + student.year
student.name.gsub(/\s+/, "") 
student.name.squish
student.name.strip
student.name
student.name.humanize
student.name
student.errors.any? ? Csvdata.make_valid(student) : student
student.errors.any?
student.errors.any
student
Student.find_by(email: "cd6wor47@aol.com")
Student.find_by(:email "cd6wor47@aol.com")
Student.find_by(:email cd6wor47@aol.com)
student
student.errors.messages[:email]
continue
student.errors.messages[:email].include? "has already been taken"
student.errors.messages[:email]
student.errors.messages.email
exit
student.errors.messages[:email]
student.errors.messages
error_list
exit
f.include? "Freshman"
f = "Freshman in High School"
Student.years.keys.include? "Freshman"
Student.years.keys
Student.years.values
Student.values
(Student.years.values.include? year) || (Student.years.keys.include? year)
(Student.years.values.include? year.capitalize) || (Student.years.keys.include? year.capitalize)
year = "Freshman"
year = "
Student.years
(Student.years.values.include? year.capitalize) || (Student.years.keys.include? year.capitalize)
(Student.years.values.include? year.capitalize) || (Student.years.keys.include? year)
(Student.years.values.include? year) || (Student.years.keys.include? year)
year = "grad"
(Student.years.values.include? year) || (Student.years.keys.include? year)
year = "Grad"
year = Grad
(Student.years.values.include? year) || (Student.years.keys.include? year)
 (Student.years.keys.include? year)
(Student.years.values.include? year)
(Student.years.values.include? year) || (Student.years.keys.include? year)
student.year
student
student.year = year
student.year
student = Student.new
Student.year
Student.years = year
Student.year = year
Student.new
Student.years.keys.include? year
Student.years.values.include? year
year
Student.years.values
Student.years.keys
year.class
year
Student.years.keys
Student.years
(Student.years.keys.include? year) ? year : "other"
year
Csvdata.seedStudentsyear
exit
!/\d+\/\d+\/\d{2}/.match(attendance).nil?
exit
student
error_list
continue
student.errors.messages
continue
student.errors.messages
exit
errors << "moo"
errors << "moo
"moo" << errors
errors = []
student.errors.messages
student.errors['messages']
student.errors
student
exit
!/\d+\/\d+\/\d{2}/.match("1/2/13").nil? 
!/\d+\/\d+\/\d{2}/.match("mike").nil? 
!/\d+\/\d+\/\d{2}/.match("2/3/12").nil? 
!/\d+\/\d+\/\d{2}/.match("YR").nil? 
/\d+\/\d+\/\d{2}/.match('3/4/12')
/\d+\/\d+\/\d{2}/.match('3/4/1')
/\d+\/\d+\/\d{2}/.match('3/4/12')
/\d+\/\d+\/\d{2}/ =~ '3/4/12 3/4/12'
/\d+\/\d+\/\d{2}/ =~ '3/4/12'
/\d+\/\d+\/\d{2}/ =~ 'haystack'
header
row["header"]
row
rwo
attendances
student
attendances
continue
attendance
continue
student
attendance
exit
continue
student
continue
student
continue
student
exit
creation_date
student
continue
exit
end
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
student
continue
exit
student.school
student.school = 100
student
continue
student
continue
student.school
student.school = 99
student.school
student.valid?
continue
student.valid?
exit
new_att.save
new_att.valid?
new_att.valid>
new_att
continue
student.id
student
exit
new_att
exit
continue
attendance
exit
continue
attendance
continue
attendance
exit
attendance
exit
continue
attendance
continue
dates
exit
t.strftime("%F")
t.strftime(%F)
t
gm(2010-1-2)
t.to_s
t = Time.new(2010,1,3)
attendance.to_time
attendance = attendance.join("-")
attendance.to_time
attendance.to_t
attendance
attendnace = attendance.join("-")
attendance.join("-")
attendance = [attendance[2], attendance[0], attendance[1]]
attendance
attendnace
attendance[2] = "20" + attendance[2]
attendance[2]
attendance
attendance = attendance.split("/")
attendance = attendance[0]
attendance = attendance.split("/")
attendance
attendance = attendance.split
attendance[3]
attendance[2]
attendance.split("/")
)
attendance.split("/"
attendance
attendance.to_time
attendance.to_t
attendance
Event.find_by(date: "2010-04-10").id
Event.find_by(date: 2010-04-10).id
Event.find_by(date: attendance).id
attendance
continue
dates
exit
row["header"]
dates
header
row.headers
row
header
continue
